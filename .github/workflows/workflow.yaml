name: "Workflow"

on:
  pull_request:
  push:
    branches:
      - "main"

jobs:

  dependecy-check:
    name: "Dependencies check"

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - "ubuntu-latest"
        php-version:
          - "8.1"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Get composer cache directory"
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.json') }}

      - name: "Install dependencies"
        run: composer update --no-interaction --no-progress

      - name: "Composer validation"
        timeout-minutes: 3
        run: composer validate

      - name: "Run dependencies check"
        timeout-minutes: 3
        run: composer outdated

  tests:
    name: "Tests"

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - "ubuntu-latest"
          - "windows-latest"
        php-version:
          - "7.4"
          - "8.0"
          - "8.1"
        dependencies:
          - "lowest"
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          php-version: "${{ matrix.php-version }}"
          ini-values: zend.assertions=1

      - name: "Get composer cache directory"
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}

      - name: "Remove unneeded dev dependencies"
        if: ${{ matrix.dependencies == 'lowest' }}
        run: composer remove --no-progress --no-update --no-scripts --dev
          symplify/* phpstan/* ekino/phpstan-banned-code
          psalm/plugin-symfony vimeo/psalm
          infection/infection

      - name: "Install lowest dependencies"
        if: ${{ matrix.dependencies == 'lowest' }}
        run: composer update --no-interaction --no-progress --prefer-lowest --prefer-stable

      - name: "Install highest dependencies"
        if: ${{ matrix.dependencies == 'highest' }}
        run: composer update --no-interaction --no-progress

      - name: "Run tests"
        timeout-minutes: 3
        run: vendor/bin/phpunit --no-coverage --no-logging

  code-coverage:
    name: "Code Coverage"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.1"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          php-version: "${{ matrix.php-version }}"
          ini-values: zend.assertions=1

      - name: "Get composer cache directory"
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}

      - name: "Install dependencies"
        run: composer update --no-interaction --no-progress

      - name: "Run tests"
        timeout-minutes: 3
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-xml=coverage/coverage-xml --log-junit=coverage/junit.xml

      - name: "Send code coverage report to Codecov.io"
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true

      - name: "Infection"
        timeout-minutes: 10
        run: vendor/bin/infection --ansi --threads=$(nproc) --coverage=coverage --skip-initial-tests
        env:
          INFECTION_BADGE_API_KEY: ${{ secrets.INFECTION_BADGE_API_KEY }}

      - name: "Output infection"
        run: cat log/infection.log

  static-analysis:
    name: "Static Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.1"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: cs2pr

      - name: "Get composer cache directory"
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}

      - name: "Install dependencies"
        run: composer update --no-interaction --no-progress

      - name: "Check coding standards"
        run: vendor/bin/php-cs-fixer fix --dry-run --allow-risky=yes --diff

      - name: "Run Psalm"
        run: vendor/bin/psalm --no-progress --shepherd --output-format=github --show-info=true --stats

      - name: "Run Phpstan"
        run: vendor/bin/phpstan --no-progress
